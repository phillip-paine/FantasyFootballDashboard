load("C:/Users/Phillip/Downloads/2ScenarioBBN_output.RData")
jags_output.all[1:5, ]
jags_output.all[1, ]
jags_output.all$mcmc[1, ]
jags_output.all:mcmc[1, ]
jags_output.all[[1]]
jags_output.all[[1]][1:5,2]
jags_output.all[[1]][1:5,1:5]
count.pois <- rpois(n = 2500, 0.03)
table(count.pois)
count.pois <- rpois(n = 2500, 0.3)
table(count.pois)
count.pois <- rpois(n = 2500, 0.05)
table(count.pois)
count.pois <- rpois(n = 2500, 0.09)
table(count.pois)
count.pois <- rpois(n = 2500, 0.15)
table(count.pois)
count.pois <- rpois(n = 2500, 0.12)
table(count.pois)
N.clm = 300
claimAmt <- rgamma(n = N.clm, shape = 2, rate = 1/2000)
plot(density(claimAmt))
gam.fit <- fitdistr(claimAmt/1000, "gamma")
library(MASS)
gam.fit <- fitdistr(claimAmt/1000, "gamma") #maybe on the wrong scale to find param estimates, i.e. rate is too low.
claim.gam <- rgamma(sum(count.pois), shape = gam.fit$estimate[1], rate = gam.fit$estimate[2]/1000)
h1<-hist(claimAmt, breaks=20)
h2<-hist(claim.gam, breaks=20)
premiumIncome = 500000
lossRatio = sum(claim.gam)/premiumIncome
lossRatio
premiumIncome = 1500000
lossRatio = sum(claim.gam)/premiumIncome
premiumIncome = 1800000
lossRatio = sum(claim.gam)/premiumIncome
premiumIncome = 2100000 #from data.
lossRatio = sum(claim.gam)/premiumIncome
n.1 <- 505
n.2 <- 480
n.3 <- 510
id.1 <- sample(700, n.1, replace = FALSE)
id.2 <- sample(700, n.2, replace = FALSE)
id.3 <- sample(700, n.3, replace = FALSE)
cnt.1 <- rpois(n.1, lambda = 0.3)
cnt.2 <- rpois(n.2, lambda = 0.25)
cnt.3 <- rpois(n.3, lambda = 0.38)
yr.1 <- rep("2014", length = n.1)
yr.2 <- rep("2015", length = n.2)
yr.3 <- rep("2016", length = n.3)
Dat1 <- as.data.frame(cbind(id.1, yr.1, cnt.1))
Dat2 <- as.data.frame(cbind(id.2, yr.2, cnt.2))
Dat3 <- as.data.frame(cbind(id.3, yr.3, cnt.3))
View(Dat1)
Dat12 <- merge(Dat1, Dat2, by.x = "id.1", by.y = "id.2")
View(Dat12)
Dat12 <- merge(Dat12, Dat3, by.x = "id.1", by.y = "id.3")
x <- seq(0, 5, by = 0.01)
plot(x, dgamma(x, shape = 1, rate = 1))
plot(x, dgamma(x, shape = 1, rate = 1/2))
plot(x, dgamma(x, shape = 1, rate = 1/5))
plot(x, dgamma(x, shape = 1, rate = 3))
plot(x, dgamma(x, shape = 2, rate = 3))
plot(x, dgamma(x, shape = 2, rate = 4))
plot(x, dgamma(x, shape = 2, rate = 1/2))
plot(x, dgamma(x, shape = 2, rate = 1/6))
plot(x, dgamma(x, shape = 2, rate = 1))
plot(x, dgamma(x, shape = 0.5, rate = 0.01))
plot(x, dgamma(x, shape = 2, rate = 0.01))
Dat12 <- merge(Dat1, Dat2, by.x = "id.1", by.y = "id.2")
Dat13 <- merge(Dat12, Dat3, by.x = "id.1", by.y = "id.3") #left with 255 observations
library(rjags)
mean(cnt.1)
dim(Dat13)[1]
a
N.policy <- 10000
community.Cov <- rbinom(N.policy, size  = 5, prob = c(0.3, 0.2, 0.1, 0.25, 0.15, 0.2))
age.Cov <- runif(n = N.policy, 21, 70)
prevClaim.cov <- rbinom(N.policy, size = 1, prob = 0.05) #previous claim.
age.Cov <- round(rnorm(n = N.policy, mean = 40, sd = 5), 0)
age.Cov <- round(rnorm(n = N.policy, mean = 40, sd = 15), 0)
summary(age.Cov)
age.Cov <- round(rnorm(n = N.policy, mean = 40, sd = 8), 0)
summary(age.Cov)
age.Cov <- round(rnorm(n = N.policy, mean = 45, sd = 6), 0)
age.Cov <- round(rnorm(n = N.policy, mean = 45, sd = 6), 0)
summary(age.Cov)
binom.part <- rep(0, length = N.policy)
binom.prob <- ifelse(prevClaim.cov == 0, 0.01, 0.25)
for(i in 1:N.policy){
binom.part <- rbinom(n = 1, size = 1, p = binom.prob[i])
}
table(binom.part)
binom.part <- rep(0, length = N.policy)
binom.prob <- ifelse(prevClaim.cov == 0, 0.01, 0.25)
for(i in 1:N.policy){
binom.part[i] <- rbinom(n = 1, size = 1, p = binom.prob[i])
}
table(binom.part)
table(binom.part, prevClaim.cov)
0.1*45
0.01*45
0.001*45
0.005*45
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.15 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
library(extraDistr)
library(MASS)
library(rjags)
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.15 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
table(pois.part, community.cov) #
table(pois.part, community.Cov) #
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.15 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
if(binom.part > 0){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
}
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.15 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
if(binom.part[i] > 0){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
}
table(pois.part, community.cov) #
table(pois.part, community.Cov) #
table(pois.part[poispart >0], community.Cov) #
table(pois.part[pois.part >0], community.Cov) #
library(extraDistr)
library(MASS)
library(rjags)
### SIMULATING POISSON-HURDLE DISTRIBUTION DATA:
N.policy <- 10000
# Part 0: The covariate information:
age.Cov <- round(rnorm(n = N.policy, mean = 45, sd = 5.5), 0)
prevClaim.Cov <- rbinom(N.policy, size = 1, prob = 0.05) #previous claim?
community.Cov <- rbinom(N.policy, size  = 5, prob = c(0.3, 0.2, 0.1, 0.25, 0.15)) #area of BC
# Part I: Binomial Data for zero and non-zero
# Suppose that this only depends on prev.claim covariate:
binom.part <- rep(0, length = N.policy)
binom.prob <- ifelse(prevClaim.Cov == 0, 0.01, 0.25)
for(i in 1:N.policy){
binom.part[i] <- rbinom(n = 1, size = 1, p = binom.prob[i])
}
#size = no. of possible non-zero options, p = prob. of success (i.e. a non-zero)
table(binom.part, prevClaim.cov) #Note the higher percentage of claims for people with previous claims.
table(binom.part, prevClaim.Cov) #Note the higher percentage of claims for people with previous claims.
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.15 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
if(binom.part[i] > 0){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
}
# generate as many truncated poisson random values as there are non-zeros in binom.part.
table(pois.part[pois.part > 0], community.Cov) #
table(pois.part, community.Cov) #
table(community.Cov)
community.Cov <- round(runif(N.policy, 1, 5)) #area of BC
table(community.Cov)
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.15 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
if(binom.part[i] > 0){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
}
# generate as many truncated poisson random values as there are non-zeros in binom.part.
table(pois.part, community.Cov) #
pois.mean <- 0.2 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
if(binom.part[i] > 0){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
}
# generate as many truncated poisson random values as there are non-zeros in binom.part.
table(pois.part, community.Cov) #
pois.part <- rep(0, length = N.policy)
pois.mean <- 0.2 + 0.003*age.Cov + ifelse(community.Cov == 0, -0.1,
ifelse(community.Cov == 1, -0.05,
ifelse(community.Cov == 2, 0.15, 0)))
for(i in 1:N.policy){
if(binom.part[i] > 0){
pois.part[i] <- rtpois(n = 1, lambda = pois.mean[i], a = 0) #truncated poisson - starting at 1 from the extraDistr package
}
}
# generate as many truncated poisson random values as there are non-zeros in binom.part.
table(pois.part, community.Cov) #
poisFit <- fitdistr(claimCounts, "poisson")
table(rpois(N.policy, lambda = poisFit$estimate))
claimCounts <- pois.part
poisFit <- fitdistr(claimCounts, "poisson")
table(rpois(N.policy, lambda = poisFit$estimate))
table(claimCounts)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("tidyverse")
install.packages(c("httr", "RCurl", "dplyr", "data.table", "qdapRegex", "rjags", "randomforest"))
install.packages("randomForest")
PlayersMatchData <- read.csv("https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2021-22/gws/merged_gw.csv", header = TRUE)
View(PlayersMatchData)
# Fix names:
PlayersMatchData$name <- iconv(PlayersMatchData$name, from="UTF-8", to="LATIN1")
setwd("D:/Phillip/GitHub/FantasyFootball2122/Code")
source('required_packages.R')
source('required_functions.R')
source('required_parameters.R')
shiny::runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
runApp('D:/Phillip/GitHub/FantasyFootball2122/FFDashboard1')
